// Color
/////////////////////////////////////////////////////
$white: #fcfcfc;
$gray: #f2f2f2;
$black: #1a1a1a;

// Pointer
/////////////////////////////////////////////////////
@mixin pointer {
  &:hover {
    cursor: pointer;
  }
}

.external {
  &:hover {
    cursor: ne-resize !important;
  }
}

// Units
/////////////////////////////////////////////////////
$gutter: 10px;
$gutter-half: $gutter / 2;
$gutter-quarter: $gutter / 4;

$margin-sm: $gutter * 2;
$margin-md: $gutter * 4;
$margin-lg: $gutter * 8;
$margin-xl: $gutter * 16;

// Styles
/////////////////////////////////////////////////////
@mixin roundCorners() {
  line-height: 0;
  border-radius: $gutter-half;
  overflow: hidden;
}
@mixin sticky() {
  top: $gutter;
  position: -webkit-sticky; /* Required for Safari */
  position: sticky;
}

// Breakpoints
/////////////////////////////////////////////////////
$breakpoints: (
  "lg": 1440px,
  "md": 925px,
  "sm": 550px,
) !default;

@mixin break-at($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Grid system
////////////////////////////////////////////////////////////////////////////////
$column-count: 12;

@for $i from 1 through $column-count {
  .col-#{$i} {
    grid-column: span #{$i};
  }
}

@for $i from 1 through $column-count {
  @for $j from 1 through $column-count {
    .col-#{$i}-#{$j} {
      grid-column: #{$j} / span #{$i};
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  @include break-at($breakpoint) {
    @for $i from 1 through $column-count {
      @for $j from 1 through $column-count {
        .col-#{$breakpoint}-#{$i}-#{$j} {
          grid-column: #{$j} / span #{$i};
        }
      }
    }

    @for $i from 1 through $column-count {
      .col-#{$breakpoint}-#{$i} {
        grid-column: span #{$i};
      }
    }
  }
}

// Transition
/////////////////////////////////////////////////////
@mixin transition($prop, $time, $ease) {
  -webkit-transition: $prop $time $ease;
  -moz-transition: $prop $time $ease;
  -ms-transition: $prop $time $ease;
  -o-transition: $prop $time $ease;
  transition: $prop $time $ease;
}

.preload {
  -webkit-transition: none !important;
  -moz-transition: none !important;
  -ms-transition: none !important;
  -o-transition: none !important;
  transition: none !important;
}
